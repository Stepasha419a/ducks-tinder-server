name: 'ducks-tinder'
services:
  chat-service:
    container_name: chat-service
    restart: always
    build:
      context: .
      dockerfile: chat-service/Dockerfile
    depends_on:
      - rabbitmq
      - postgres
      - user-service
    environment:
      NODE_ENV: dev-docker
    ports:
      - '${CHAT_SERVICE_PORT}:${CHAT_SERVICE_PORT}'
  user-service:
    container_name: user-service
    restart: always
    build:
      context: .
      dockerfile: user-service/Dockerfile
    depends_on:
      - rabbitmq
      - postgres
      - file-service
      - map-service
  map-service:
    container_name: map-service
    restart: always
    build:
      context: map-service
      dockerfile: Dockerfile
    depends_on:
      - postgres
    ports:
      - '${MAP_SERVICE_PORT}:${MAP_SERVICE_PORT}'
      - '${MAP_SERVICE_GRPC_PORT}:${MAP_SERVICE_GRPC_PORT}'
  auth-service:
    container_name: auth-service
    restart: always
    build:
      context: auth-service
      dockerfile: Dockerfile
    environment:
      MODE: dev-docker
    ports:
      - '${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}'
    deploy:
      restart_policy:
        condition: on-failure
    command: ['/usr/src/app/app']
    depends_on:
      - rabbitmq
      - postgres
  billing-service:
    container_name: billing-service
    restart: always
    build:
      context: billing-service
      dockerfile: Dockerfile
    environment:
      MODE: dev-docker
    ports:
      - '${BILLING_SERVICE_PORT}:${BILLING_SERVICE_PORT}'
      - '${BILLING_SERVICE_GRPC_PORT}:${BILLING_SERVICE_GRPC_PORT}'
    deploy:
      restart_policy:
        condition: on-failure
    command: ['/usr/src/app/app']
    depends_on:
      - postgres
  subscription-service:
    container_name: subscription-service
    restart: always
    build:
      context: subscription-service
      dockerfile: Dockerfile
    environment:
      MODE: dev-docker
    ports:
      - '${SUBSCRIPTION_SERVICE_PORT}:${SUBSCRIPTION_SERVICE_PORT}'
      - '${SUBSCRIPTION_SERVICE_GRPC_PORT}:${SUBSCRIPTION_SERVICE_GRPC_PORT}'
    deploy:
      restart_policy:
        condition: on-failure
    command: ['/usr/src/app/app']
    depends_on:
      - billing-service
      - postgres
  file-service:
    container_name: file-service
    restart: always
    build:
      context: .
      dockerfile: file-service/Dockerfile
    volumes:
      - file_service_static_data:/usr/src/static
    environment:
      MODE: dev-docker
    ports:
      - '${FILE_SERVICE_PORT}:${FILE_SERVICE_PORT}'
      - '${FILE_SERVICE_GRPC_PORT}:${FILE_SERVICE_GRPC_PORT}'
    deploy:
      restart_policy:
        condition: on-failure
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:4-management
    volumes:
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/cert:/etc/rabbitmq/cert
    environment:
      RABBITMQ_CONFIG_FILE: /etc/rabbitmq/rabbitmq.conf
    ports:
      - '${RABBITMQ_PORT}:${RABBITMQ_PORT}'
      - '15672:15672'
      - '15692:15692'
  postgres:
    container_name: postgres
    restart: always
    volumes:
      - ./database/postgresql/postgresql.conf:/var/lib/postgresql/postgresql.conf
      - ./database/postgresql/pg_hba.conf:/var/lib/postgresql/pg_hba.conf
    build:
      context: .
      dockerfile: database/postgresql/Dockerfile
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '${POSTGRES_PORT_LOCAL}:${POSTGRES_PORT}'
    command:
      [
        'postgres',
        '-c',
        'config_file=/var/lib/postgresql/postgresql.conf',
        '-c',
        'hba_file=/var/lib/postgresql/pg_hba.conf',
      ]
  postgres-exporter:
    container_name: postgres-exporter
    image: prometheuscommunity/postgres-exporter:v0.13.1
    environment:
      DATA_SOURCE_URI: ${POSTGRES_ROOT_URL}
      DATA_SOURCE_USER: ${POSTGRES_USER}
      DATA_SOURCE_PASS: ${POSTGRES_PASSWORD}
    ports:
      - '9187:9187'
    depends_on:
      - postgres
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:8
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@gmail.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - '5050:80'
    volumes:
      - pgadmin-data:/var/lib/pgadmin
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.53.2
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.config.file=/etc/prometheus/web-config.yml'
    ports:
      - 9090:9090
    deploy:
      placement:
        constraints:
          - node.role==manager
      restart_policy:
        condition: on-failure
  grafana:
    container_name: grafana
    image: grafana/grafana:11.4.0
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      - ./grafana/cert/:/etc/grafana/cert/
    env_file:
      - ./grafana/.env.dev
    restart: always
    depends_on:
      - prometheus
    ports:
      - 9100:9100

volumes:
  pgadmin-data: {}
  prometheus_data: {}
  grafana_data: {}
  file_service_static_data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: 'static'
