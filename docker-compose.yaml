name: 'ducks-tinder'
services:
  chat-service:
    container_name: chat-service
    restart: always
    build:
      context: .
      dockerfile: chat-service/Dockerfile
    depends_on:
      - rabbitmq
      - postgres
    ports:
      - '${CHAT_SERVICE_PORT}:${CHAT_SERVICE_PORT}'
  user-service:
    container_name: user-service
    restart: always
    build:
      context: .
      dockerfile: user-service/Dockerfile
    depends_on:
      - rabbitmq
      - postgres
    ports:
      - '${USER_SERVICE_PORT}:${USER_SERVICE_PORT}'
  auth-service:
    container_name: auth-service
    restart: always
    build:
      context: auth-service
      dockerfile: Dockerfile
    environment:
      MODE: dev-docker
    ports:
      - '${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}'
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      - rabbitmq
      - postgres
  billing-service:
    container_name: billing-service
    restart: always
    build:
      context: billing-service
      dockerfile: Dockerfile
    environment:
      MODE: dev-docker
    ports:
      - '${BILLING_SERVICE_PORT}:${BILLING_SERVICE_PORT}'
      - '${BILLING_SERVICE_GRPC_PORT}:${BILLING_SERVICE_GRPC_PORT}'
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      - postgres
  file-service:
    container_name: file-service
    restart: always
    build:
      context: .
      dockerfile: file-service/Dockerfile
    volumes:
      - file_service_static_data:/usr/src/static
    environment:
      MODE: dev-docker
    ports:
      - '${FILE_SERVICE_PORT}:${FILE_SERVICE_PORT}'
      - '${FILE_SERVICE_GRPC_PORT}:${FILE_SERVICE_GRPC_PORT}'
    deploy:
      restart_policy:
        condition: on-failure
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:management
    ports:
      - '${RABBITMQ_PORT}:${RABBITMQ_PORT}'
      - '15672:15672'
  postgres:
    container_name: postgres
    image: postgres:13
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '${POSTGRES_PORT_LOCAL}:${POSTGRES_PORT}'
  prometheus:
    container_name: prometheus
    image: prom/prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - 9090:9090
    deploy:
      placement:
        constraints:
          - node.role==manager
      restart_policy:
        condition: on-failure
  grafana:
    container_name: grafana
    image: grafana/grafana
    depends_on:
      - prometheus
    ports:
      - 9100:9100
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/.env.dev
    restart: always

volumes:
  prometheus_data: {}
  grafana_data: {}
  file_service_static_data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: 'static'
