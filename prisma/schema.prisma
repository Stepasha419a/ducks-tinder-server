// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator chatService {
  provider = "prisma-client-js"
  output   = "../chat-service/node_modules/.prisma/client"
}

generator userService {
  provider = "prisma-client-js"
  output   = "../user-service/node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String  @id @default(uuid())
  password            String
  email               String  @unique
  name                String
  description         String?
  nickname            String?
  isActivated         Boolean @default(false)
  activationLink      String  @default(uuid())
  age                 Int?
  sex                 String?
  distance            Int?
  usersOnlyInDistance Boolean @default(false)
  preferSex           String?
  preferAgeFrom       Int?
  preferAgeTo         Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token     Token?
  pictures  Picture[]
  interests UsersOnInterests[]

  messages Message[]
  chats    UsersOnChats[]

  pairFor User[] @relation(name: "Pairs")
  pairs   User[] @relation(name: "Pairs")

  place Place?

  checked    CheckedUsers[] @relation(name: "Checked")
  wasChecked CheckedUsers[] @relation(name: "WasChecked")

  zodiacSign             String?
  education              String?
  childrenAttitude       String?
  personalityType        String?
  communicationStyle     String?
  attentionSign          String?
  pet                    String?
  alcoholAttitude        String?
  smokingAttitude        String?
  trainingAttitude       String?
  foodPreference         String?
  socialNetworksActivity String?
  chronotype             String?

  @@map("users")
}

model CheckedUsers {
  checked      User   @relation(name: "Checked", fields: [checkedId], references: [id])
  checkedId    String
  wasChecked   User   @relation(name: "WasChecked", fields: [wasCheckedId], references: [id])
  wasCheckedId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([checkedId, wasCheckedId])
  @@map("checked-users")
}

model Place {
  user      User   @relation(fields: [id], references: [id])
  id        String @id
  latitude  Float
  longitude Float
  name      String
  address   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("places")
}

model Token {
  user         User     @relation(fields: [id], references: [id])
  id           String   @id
  refreshToken String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("tokens")
}

model Picture {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  order     Int
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pictures")
}

model UsersOnInterests {
  interest String
  user     User   @relation(fields: [userId], references: [id])
  userId   String

  @@unique([userId, interest])
  @@map("users-on-interests")
}

model Message {
  id     String @id @default(uuid())
  text   String
  user   User   @relation(fields: [userId], references: [id])
  userId String
  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String

  replied   Message?  @relation(name: "MessageReply", fields: [repliedId], references: [id])
  repliedId String?
  repliedBy Message[] @relation(name: "MessageReply")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}

model Chat {
  id          String    @id @default(uuid())
  messages    Message[]
  blocked     Boolean   @default(false)
  blockedById String?

  users UsersOnChats[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("chats")
}

model UsersOnChats {
  chat             Chat   @relation(fields: [chatId], references: [id])
  chatId           String
  user             User   @relation(fields: [userId], references: [id])
  userId           String
  newMessagesCount Int    @default(0)

  createdAt  DateTime @default(now())
  lastSeenAt DateTime @default(now())

  @@id([userId, chatId])
  @@map("users-on-chats")
}
