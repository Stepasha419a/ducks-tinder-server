// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String  @id @default(uuid())
  password            String
  email               String  @unique
  name                String
  description         String?
  nickname            String?
  isActivated         Boolean @default(false)
  activationLink      String  @default(uuid())
  age                 Int?
  sex                 String?
  distance            Int?
  usersOnlyInDistance Boolean @default(false)
  preferSex           String?
  preferAgeFrom       Int?
  preferAgeTo         Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token     Token?
  pictures  Picture[]
  interests Interest[]

  messages   Message[]
  chats      Chat[]
  chatsVisit ChatVisit[]

  pairFor User[] @relation(name: "Pairs")
  pairs   User[] @relation(name: "Pairs")

  place Place?

  checked    CheckedUsers[] @relation(name: "Checked")
  wasChecked CheckedUsers[] @relation(name: "WasChecked")

  zodiacSign   ZodiacSign? @relation(fields: [zodiacSignId], references: [id])
  zodiacSignId String?

  education   Education? @relation(fields: [educationId], references: [id])
  educationId String?

  childrenAttitude   ChildrenAttitude? @relation(fields: [childrenAttitudeId], references: [id])
  childrenAttitudeId String?

  personalityType   PersonalityType? @relation(fields: [personalityTypeId], references: [id])
  personalityTypeId String?

  communicationStyle    CommunicationStyle? @relation(fields: [communicationStylesId], references: [id])
  communicationStylesId String?

  attentionSign    AttentionSign? @relation(fields: [attentionSignsId], references: [id])
  attentionSignsId String?

  pet   Pet?    @relation(fields: [petId], references: [id])
  petId String?

  alcoholAttitude   AlcoholAttitude? @relation(fields: [alcoholAttitudeId], references: [id])
  alcoholAttitudeId String?

  smokingAttitude   SmokingAttitude? @relation(fields: [smokingAttitudeId], references: [id])
  smokingAttitudeId String?

  trainingAttitude   TrainingAttitude? @relation(fields: [trainingAttitudeId], references: [id])
  trainingAttitudeId String?

  foodPreference   FoodPreference? @relation(fields: [foodPreferenceId], references: [id])
  foodPreferenceId String?

  socialNetworksActivity   SocialNetworksActivity? @relation(fields: [socialNetworksActivityId], references: [id])
  socialNetworksActivityId String?

  chronotype   Chronotype? @relation(fields: [chronotypeId], references: [id])
  chronotypeId String?

  @@map("users")
}

model CheckedUsers {
  checked      User   @relation(name: "Checked", fields: [checkedId], references: [id])
  checkedId    String
  wasChecked   User   @relation(name: "WasChecked", fields: [wasCheckedId], references: [id])
  wasCheckedId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([checkedId, wasCheckedId])
  @@map("checked-users")
}

model Place {
  user      User   @relation(fields: [id], references: [id])
  id        String @id
  latitude  Float
  longitude Float
  name      String
  address   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("places")
}

model Token {
  user         User     @relation(fields: [id], references: [id])
  id           String   @id
  refreshToken String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("tokens")
}

model Picture {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  order     Int
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pictures")
}

model Interest {
  id    String @id @default(uuid())
  name  String @unique
  users User[]

  @@map("interests")
}

model ZodiacSign {
  id    String @id @default(uuid())
  name  String @unique
  users User[]

  @@map("zodiac-signs")
}

model Education {
  id    String @id @default(uuid())
  name  String @unique
  users User[]

  @@map("educations")
}

model ChildrenAttitude {
  id    String @id @default(uuid())
  name  String @unique
  users User[]

  @@map("children-attitudes")
}

model PersonalityType {
  id    String @id @default(uuid())
  name  String @unique
  users User[]

  @@map("personality-types")
}

model CommunicationStyle {
  id    String @id @default(uuid())
  name  String @unique
  users User[]

  @@map("communication-styles")
}

model AttentionSign {
  id    String @id @default(uuid())
  name  String @unique
  users User[]

  @@map("attention-signs")
}

model Pet {
  id    String @id @default(uuid())
  name  String @unique
  users User[]

  @@map("pets")
}

model AlcoholAttitude {
  id    String @id @default(uuid())
  name  String @unique
  users User[]

  @@map("alcohol-attitudes")
}

model SmokingAttitude {
  id    String @id @default(uuid())
  name  String @unique
  users User[]

  @@map("smoking-attitudes")
}

model TrainingAttitude {
  id    String @id @default(uuid())
  name  String @unique
  users User[]

  @@map("training-attitudes")
}

model FoodPreference {
  id    String @id @default(uuid())
  name  String @unique
  users User[]

  @@map("food-preferences")
}

model SocialNetworksActivity {
  id    String @id @default(uuid())
  name  String @unique
  users User[]

  @@map("social-networks-activities")
}

model Chronotype {
  id    String @id @default(uuid())
  name  String @unique
  users User[]

  @@map("chronotypes")
}

model Message {
  id     String @id @default(uuid())
  text   String
  user   User   @relation(fields: [userId], references: [id])
  userId String
  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String

  replied   Message?  @relation(name: "MessageReply", fields: [repliedId], references: [id])
  repliedId String?
  repliedBy Message[] @relation(name: "MessageReply")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}

model Chat {
  id          String      @id @default(uuid())
  messages    Message[]
  users       User[]
  blocked     Boolean     @default(false)
  blockedById String?
  chatVisits  ChatVisit[]

  @@map("chats")
}

model ChatVisit {
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  chat     Chat     @relation(fields: [chatId], references: [id])
  chatId   String
  lastSeen DateTime

  @@id([userId, chatId])
  @@map("chat-visit")
}
