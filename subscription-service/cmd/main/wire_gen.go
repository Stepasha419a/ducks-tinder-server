// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/Stepasha419a/ducks-tinder-server/subscription-service/internal/application/facade"
	"github.com/Stepasha419a/ducks-tinder-server/subscription-service/internal/domain/service/billing"
	"github.com/Stepasha419a/ducks-tinder-server/subscription-service/internal/domain/service/config"
	"github.com/Stepasha419a/ducks-tinder-server/subscription-service/internal/domain/service/jwt"
	"github.com/Stepasha419a/ducks-tinder-server/subscription-service/internal/domain/service/validator"
	"github.com/Stepasha419a/ducks-tinder-server/subscription-service/internal/infrastructure/database"
	"github.com/Stepasha419a/ducks-tinder-server/subscription-service/internal/infrastructure/repository_impl"
	"github.com/Stepasha419a/ducks-tinder-server/subscription-service/internal/infrastructure/service/billing_service_impl"
	"github.com/Stepasha419a/ducks-tinder-server/subscription-service/internal/infrastructure/service/config_impl"
	"github.com/Stepasha419a/ducks-tinder-server/subscription-service/internal/infrastructure/service/login_impl"
	"github.com/Stepasha419a/ducks-tinder-server/subscription-service/internal/infrastructure/service/tls"
	"github.com/Stepasha419a/ducks-tinder-server/subscription-service/internal/infrastructure/service/validator_impl"
	"github.com/Stepasha419a/ducks-tinder-server/subscription-service/internal/interface/grpc"
	"github.com/Stepasha419a/ducks-tinder-server/subscription-service/internal/interface/grpc/interceptor"
	"github.com/Stepasha419a/ducks-tinder-server/subscription-service/internal/interface/grpc/server"
	"github.com/Stepasha419a/ducks-tinder-server/subscription-service/internal/interface/http/controller/metrics"
	"github.com/Stepasha419a/ducks-tinder-server/subscription-service/internal/interface/http/controller/subscription"
	"github.com/Stepasha419a/ducks-tinder-server/subscription-service/internal/interface/http/fiber"
	"github.com/Stepasha419a/ducks-tinder-server/subscription-service/internal/interface/http/middleware"
	"github.com/Stepasha419a/ducks-tinder-server/subscription-service/proto/gen"
	"github.com/gofiber/fiber/v3"
	"google.golang.org/grpc"
)

// Injectors from wire.go:

func newContainer() (*Container, func(), error) {
	validatorServiceImpl := validator_service_impl.NewValidatorService()
	configServiceImpl := config_service_impl.NewConfigService(validatorServiceImpl)
	jwtService := jwt_service.NewJwtService(configServiceImpl)
	middlewareMiddleware := middleware.NewMiddleware(jwtService)
	app, cleanup := fiber_impl.NewFiberApp(middlewareMiddleware, configServiceImpl)
	metricsController := metrics_controller.NewMetricsController(app)
	tlsService := tls_service.NewTlsService(configServiceImpl)
	string2 := provideDbName(configServiceImpl)
	postgresInstance, cleanup2 := database.NewPostgresInstance(configServiceImpl, tlsService, string2)
	subscriptionRepositoryImpl := repository_impl.NewSubscriptionRepository(postgresInstance)
	loginServiceImpl := login_service_impl.NewLoginServiceImpl(configServiceImpl)
	billingServiceImpl, cleanup3, err := billing_service_impl.NewBillingServiceImpl(configServiceImpl, jwtService, tlsService)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	subscriptionFacade := facade.NewSubscriptionFacade(subscriptionRepositoryImpl, loginServiceImpl, billingServiceImpl)
	subscriptionController := subscription_controller.NewSubscriptionController(app, subscriptionFacade, validatorServiceImpl)
	subscriptionServiceServerImpl := grpc_subscription_service_server_impl.NewSubscriptionServiceServerImpl(subscriptionFacade, validatorServiceImpl)
	grpcInterceptor := grpc_interceptor.NewInterceptor(jwtService)
	server, cleanup4 := grpc_interface.NewGrpc(subscriptionServiceServerImpl, grpcInterceptor, tlsService)
	container := &Container{
		ValidatorService:       validatorServiceImpl,
		ConfigService:          configServiceImpl,
		App:                    app,
		MetricsController:      metricsController,
		SubscriptionController: subscriptionController,
		BillingServiceServer:   subscriptionServiceServerImpl,
		TlsService:             tlsService,
		GrpcServer:             server,
		BillingService:         billingServiceImpl,
	}
	return container, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

type Container struct {
	ValidatorService       validator_service.ValidatorService
	ConfigService          config_service.ConfigService
	App                    *fiber.App
	MetricsController      *metrics_controller.MetricsController
	SubscriptionController *subscription_controller.SubscriptionController
	BillingServiceServer   gen.SubscriptionServiceServer
	TlsService             *tls_service.TlsService
	GrpcServer             *grpc.Server
	BillingService         billing_service.BillingService
}

func provideDbName(configService config_service.ConfigService) string {
	return configService.GetConfig().PostgresDatabase
}
